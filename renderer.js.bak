// renderer.js - UI logic for the renderer process

// --- Elements ---
const shareCodeInput = document.getElementById('share-code');
const downloadFolderInput = document.getElementById('download-folder');
const selectFolderBtn = document.getElementById('select-folder-btn');
const downloadBtn = document.getElementById('download-btn');
const downloadBtnText = document.getElementById('download-btn-text');
const statusContainer = document.getElementById('status-container');
const multiShareCodeInput = document.getElementById('multi-share-code');
const findDemosBtn = document.getElementById('find-demos-btn');
const resultsContainer = document.getElementById('results-container');
const downloadAllBtn = document.getElementById('download-all-btn');
const copyLinksBtn = document.getElementById('copy-links-btn');
const workerCountInput = document.getElementById('worker-count');
const steamLink = document.getElementById('steam-link');

let foundDemoUrls = [];

// --- Initialization ---
document.addEventListener('DOMContentLoaded', async () => {
    const savedPath = await window.electronAPI.store.get('downloadPath');
    if (savedPath) downloadFolderInput.value = savedPath;
});

// --- Event Listeners ---
selectFolderBtn.addEventListener('click', async () => {
  const folderPath = await window.electronAPI.selectFolder();
  if (folderPath) downloadFolderInput.value = folderPath;
});

downloadBtn.addEventListener('click', () => {
  const shareCode = extractShareCode(shareCodeInput.value);
  const downloadPath = downloadFolderInput.value;
  if (!shareCode || !downloadPath) {
    addStatusMessage({ message: 'Please provide a valid share code and a download folder.', isError: true });
    return;
  }
  setUIDisabled(true);
  statusContainer.innerHTML = '';
  addStatusMessage({ message: 'Starting process...' });
  window.electronAPI.downloadDemo({ shareCode, downloadPath });
});

findDemosBtn.addEventListener('click', async () => {
    const codes = multiShareCodeInput.value.split('\n').map(extractShareCode).filter(Boolean);
    if (codes.length === 0) {
        addStatusMessage({ message: 'Please enter at least one share code.', isError: true });
        return;
    }
    if (!downloadFolderInput.value) {
        addStatusMessage({ message: 'Please select a download folder first.', isError: true });
        return;
    }
    setUIDisabled(true);
    addStatusMessage({ message: `Searching for ${codes.length} demos...` });
    resultsContainer.innerHTML = '<p class="text-gray-400 p-2">Searching...</p>';
    resultsContainer.classList.remove('hidden');
    downloadAllBtn.classList.add('hidden');
    copyLinksBtn.classList.add('hidden');

    const results = await window.electronAPI.findDemos(codes);
    foundDemoUrls = results.found.map(r => r.url);
    displayBatchResults(results);

    if (foundDemoUrls.length > 0) {
        downloadAllBtn.classList.remove('hidden');
        copyLinksBtn.classList.remove('hidden');
        downloadAllBtn.textContent = `Download All (${foundDemoUrls.length}) Demos`;
    }
    setUIDisabled(false);
});

downloadAllBtn.addEventListener('click', () => {
    const downloadPath = downloadFolderInput.value;
    const workers = parseInt(workerCountInput.value, 10) || 4;
    if (foundDemoUrls.length === 0 || !downloadPath) {
        addStatusMessage({ message: 'No valid demos found or no download folder selected.', isError: true });
        return;
    }
    setUIDisabled(true);
    statusContainer.innerHTML = '';
    window.electronAPI.downloadAllDemos(foundDemoUrls, downloadPath, workers);
});

copyLinksBtn.addEventListener('click', () => {
    if (foundDemoUrls.length > 0) {
        navigator.clipboard.writeText(foundDemoUrls.join('\n')).then(() => {
            addStatusMessage({ message: `Copied ${foundDemoUrls.length} links to clipboard.`, status: 'success' });
            copyLinksBtn.textContent = 'Copied!';
            setTimeout(() => { copyLinksBtn.textContent = 'Copy Links'; }, 2000);
        });
    }
});

steamLink.addEventListener('click', (event) => {
    event.preventDefault();
    window.electronAPI.openExternalLink(steamLink.href);
});

// Event delegation for retry buttons
statusContainer.addEventListener('click', (event) => {
    if (event.target.classList.contains('retry-btn')) {
        const url = event.target.dataset.url;
        const downloadPath = downloadFolderInput.value;
        if (url && downloadPath) {
            event.target.textContent = 'Retrying...';
            event.target.disabled = true;
            window.electronAPI.retryDownload(url, downloadPath);
        }
    }
});

// --- IPC Listeners ---
window.electronAPI.onDownloadStatus((data) => {
  addStatusMessage(data);
  if (data.status === 'complete' || data.status === 'error' && !data.retryUrl) {
    setUIDisabled(false);
  }
});

// --- Helper Functions ---
function setUIDisabled(isDisabled) {
    [downloadBtn, findDemosBtn, downloadAllBtn, copyLinksBtn, workerCountInput].forEach(el => el.disabled = isDisabled);
    downloadBtnText.textContent = isDisabled ? 'Working...' : 'Download Demo';
}

function extractShareCode(rawInput) {
    if (!rawInput) return null;
    const match = rawInput.trim().match(/(CSGO-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5})/);
    return match ? match[0] : null;
}

function displayBatchResults(results) {
    resultsContainer.innerHTML = '';
    if (results.found.length === 0 && results.notFound.length === 0) {
        resultsContainer.innerHTML = '<p class="text-gray-500 p-2">No valid codes found.</p>';
        return;
    }
    results.found.forEach(item => {
        resultsContainer.innerHTML += `<div class="result-item p-2 text-sm"><span class="text-green-400">✓ Found:</span> <span class="text-gray-400">${item.code}</span></div>`;
    });
    results.notFound.forEach(code => {
        resultsContainer.innerHTML += `<div class="result-item p-2 text-sm"><span class="text-red-400">✗ Failed:</span> <span class="text-gray-400">${code}</span></div>`;
    });
    addStatusMessage({ message: `Found ${results.found.length} valid demos. ${results.notFound.length} codes failed.` });
}

function addStatusMessage({ message, isError, retryUrl }) {
    const p = document.createElement('p');
    const timestamp = new Date().toLocaleTimeString();
    
    let colorClass = 'text-gray-300';
    if (isError) colorClass = 'text-red-400';
    else if (['success', 'downloaded', 'decompressing'].includes(status)) colorClass = 'text-green-400';

    p.className = colorClass;
    
    let html = `<span class="text-gray-500 mr-2">[${timestamp}]</span> ${message}`;
    if (retryUrl) {
        html += ` <button data-url="${retryUrl}" class="retry-btn ml-2 px-2 py-0.5 text-xs bg-yellow-600 hover:bg-yellow-700 rounded">Retry</button>`;
    }
    p.innerHTML = html;
    
    if (statusContainer.innerHTML.includes('Waiting for input...')) {
        statusContainer.innerHTML = '';
    }
    statusContainer.appendChild(p);
    statusContainer.scrollTop = statusContainer.scrollHeight;
}
